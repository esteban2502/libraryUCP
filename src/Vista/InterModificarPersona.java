/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vista;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import Conexion.Conexion;
import Controlador.Ctrl_Persona;
import Modelo.Persona;
import java.awt.HeadlessException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Juan Esteban
 */
public class InterModificarPersona extends javax.swing.JInternalFrame {

    /**
     * Creates new form InterModificarPersona
     */
    private int idPersona;

    public InterModificarPersona() {
        initComponents();
        this.obtenerTablaPersona();

    }

    private void Limpiar() {
        txtIdPersona.setText("");
        txtNombre1.setText("");
        txtNombre2.setText("");
        txtApellido1.setText("");
        txtApellido2.setText("");
        txtCorreo.setText("");
        txtTelefono.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablePersona = new javax.swing.JTable();
        btnEliminar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtIdPersona = new javax.swing.JTextField();
        txtNombre2 = new javax.swing.JTextField();
        txtCorreo = new javax.swing.JTextField();
        txtApellido1 = new javax.swing.JTextField();
        txtApellido2 = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        txtNombre1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setTitle("MODIFICAR/ELIMINAR; CRAI");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(204, 204, 204,80));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTablePersona.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTablePersona);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 51, 441, 182));

        btnEliminar.setBackground(new java.awt.Color(0, 102, 51));
        btnEliminar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("Eliminar");
        btnEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel2.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(459, 130, 90, 31));

        btnModificar.setBackground(new java.awt.Color(0, 102, 51));
        btnModificar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        btnModificar.setForeground(new java.awt.Color(255, 255, 255));
        btnModificar.setText("Modificar");
        btnModificar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        jPanel2.add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(459, 81, 90, 31));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Modificar/  Eliminar");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(197, 15, -1, -1));
        jPanel2.add(txtIdPersona, new org.netbeans.lib.awtextra.AbsoluteConstraints(87, 251, 97, -1));

        txtNombre2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombre2ActionPerformed(evt);
            }
        });
        jPanel2.add(txtNombre2, new org.netbeans.lib.awtextra.AbsoluteConstraints(413, 251, 116, -1));

        txtCorreo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCorreoActionPerformed(evt);
            }
        });
        jPanel2.add(txtCorreo, new org.netbeans.lib.awtextra.AbsoluteConstraints(87, 335, 261, -1));
        jPanel2.add(txtApellido1, new org.netbeans.lib.awtextra.AbsoluteConstraints(87, 293, 97, -1));

        txtApellido2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApellido2ActionPerformed(evt);
            }
        });
        jPanel2.add(txtApellido2, new org.netbeans.lib.awtextra.AbsoluteConstraints(251, 293, 97, -1));
        jPanel2.add(txtTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(413, 293, 116, -1));
        jPanel2.add(txtNombre1, new org.netbeans.lib.awtextra.AbsoluteConstraints(251, 251, 97, -1));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Apellido1");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 297, -1, -1));

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("ID");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(69, 255, -1, -1));

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Nombre2");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(354, 255, -1, -1));

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Nombre1");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(192, 255, -1, -1));

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Apellido2");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 297, -1, -1));

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Correo");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(41, 339, -1, -1));

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Telefono");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(354, 297, 53, -1));

        jPanel1.setBackground(new java.awt.Color(187, 187, 187));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 445, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 185, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 445, 185));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 560, 400));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/FondoMenuPersona.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-2, 6, 580, 422));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // cuando el usuario le de al boton eliminar
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:

        if (!txtIdPersona.getText().isEmpty()) {
            Persona persona = new Persona();
            Ctrl_Persona controlPersona = new Ctrl_Persona();

            persona.setIdPersona(Integer.parseInt(txtIdPersona.getText().trim()));
            if (!controlPersona.eliminar(idPersona)) {
                JOptionPane.showMessageDialog(null, "Registro eliminado con Exito");
                txtIdPersona.setText("");
                this.obtenerTablaPersona();

            } else {
                JOptionPane.showMessageDialog(null, "Error al Eliminar el Registro");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione un Registro");
        }

    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtApellido2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApellido2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtApellido2ActionPerformed

    private void txtCorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCorreoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCorreoActionPerformed

    private void txtNombre2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombre2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombre2ActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:

        Persona persona = new Persona();
        Ctrl_Persona controlPersona = new Ctrl_Persona();

        // Verificar si los campos obligatorios están completos
        if (txtIdPersona.getText().equals("") || txtNombre1.getText().equals("") || txtTelefono.getText().equals("")) {
            // Mostrar un mensaje si algún campo está vacío
            JOptionPane.showMessageDialog(null, "Seleccione un Registro");

        } else {

            try {
                // Configurar los datos de la persona con los valores de los campos de texto
                persona.setIdPersona(Integer.parseInt(txtIdPersona.getText().trim()));
                persona.setNombre1(txtNombre1.getText().trim());
                persona.setNombre2(txtNombre2.getText().trim());
                persona.setApellido1(txtApellido1.getText().trim());
                persona.setApellido2(txtApellido2.getText().trim());
                persona.setCorreo(txtCorreo.getText().trim());
                persona.setTelefono(txtTelefono.getText().trim());

                if (controlPersona.actualizar(persona, idPersona)) {
                    JOptionPane.showMessageDialog(null, "Datos Actualizados correctamente");

                    this.obtenerTablaPersona();
                    this.Limpiar();

                } else {
                    JOptionPane.showMessageDialog(null, "Error al actualizar");
                }

            }// Manejar posibles errores al convertir el ID de persona a entero
            catch (HeadlessException | NumberFormatException e) {
                System.out.println("Error en: " + e);
            }

        }
    }//GEN-LAST:event_btnModificarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTablePersona;
    private javax.swing.JTextField txtApellido1;
    private javax.swing.JTextField txtApellido2;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtIdPersona;
    private javax.swing.JTextField txtNombre1;
    private javax.swing.JTextField txtNombre2;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables

    private void obtenerTablaPersona() {
        Connection con = (Connection) Conexion.conectar();
        DefaultTableModel model = new DefaultTableModel(); // Crear un nuevo modelo de tabla por defecto
        String sql = "select * from tb_persona";  // Consulta SQL para seleccionar todos los registros de la tabla tb_persona
        Statement st; 

        try {
            st = (Statement) con.createStatement(); // Crear una declaración para ejecutar la consulta SQL
            ResultSet rs = st.executeQuery(sql); // Ejecutar la consulta y obtener el conjunto de resultados
            this.jTablePersona = new JTable(model); // Crear un nuevo JTable con el modelo de tabla
            this.jScrollPane1.setViewportView(this.jTablePersona); // Establecer el JTable en el JScrollPane

             // Agregar columnas al modelo de tabla
            model.addColumn("idPersona");
            model.addColumn("nombre1");
            model.addColumn("nombre2");
            model.addColumn("apellido1");
            model.addColumn("apellido2");
            model.addColumn("correo");
            model.addColumn("telefono");

            // Iterar sobre los resultados de la consulta y agregar filas al modelo de tabla
            while (rs.next()) {
                // Creando un nuevo array para almacenar los datos de una fila de la tabla (7 columnas)
                Object fila[] = new Object[7];

                for (int i = 0; i < 7; i++) {
                     // Obteniendo el valor de cada columna en la fila actual y asignándolo al array fila[]
                    fila[i] = rs.getObject(i + 1);
                }
                // Agregando la fila completa de datos al modelo de la tabla
                model.addRow(fila);

            }
            con.close();

        } catch (SQLException e) {
            System.out.println("Error al llenar la tabla Persona: " + e);
        }
        // Agregar un MouseListener al JTable para capturar eventos de clic en las filas
        jTablePersona.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila_point = jTablePersona.rowAtPoint(e.getPoint()); // Obtener la fila donde se hizo clic
                int columna_point = 0;

                if (fila_point > -1) {
                    idPersona = (int) model.getValueAt(fila_point, columna_point); // Obtener el valor de idPersona de la fila seleccionada
                    EnviarDatosPersonaSeleccionada(idPersona); // Llamar al método para enviar los datos de la persona seleccionada 
                    
                }
            }
        });

    }

    private void EnviarDatosPersonaSeleccionada(int idPersona) {

        try {
             // Establecer conexión a la base de datos
            Connection con = (Connection) Conexion.conectar();
             // Preparar la consulta SQL para seleccionar los datos de la persona con el ID proporcionado
            PreparedStatement pst = (PreparedStatement) con.prepareStatement(
                    "select * from tb_persona where idPersona ='" + idPersona + "'");
             // Ejecutar la consulta y obtener el conjunto de resultados
            ResultSet rs = pst.executeQuery();
          // Verificar si hay resultados en el conjunto de resultados
            if (rs.next()) {
                // Si hay resultados, establecer los valores de los campos de texto con los datos de la persona seleccionada
                txtIdPersona.setText(rs.getString("IdPersona"));
                txtNombre1.setText(rs.getString("nombre1"));
                txtNombre2.setText(rs.getString("nombre2"));
                txtApellido1.setText(rs.getString("apellido1"));
                txtApellido2.setText(rs.getString("apellido2"));
                txtCorreo.setText(rs.getString("correo"));
                txtTelefono.setText(rs.getString("telefono"));
            }
            // Cerrar la conexión a la base de datos
            con.close();
        } catch (SQLException e) {
            // Manejar cualquier excepción que pueda ocurrir durante la selección de los datos de la persona
            System.out.println("Error al seleccionar el registro: " + e);
        }
    }

}
